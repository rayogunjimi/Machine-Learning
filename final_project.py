# -*- coding: utf-8 -*-
"""porsche_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_UiB56QBGH9RhK6O99do2CUn51ZO_l5
"""

import pathlib
data_dir = "/content/drive/MyDrive/models"
data_dir = pathlib.Path(data_dir)
image_count = len(list(data_dir.glob('*/*.jpg')))
print(image_count)

# TWEAK PARAMETERS
learning_rate = 0.0001
epochs = 20
batch_size = 16

train_with_ratio = 0.9
validation_split = 1 - train_with_ratio

img_height = 180
img_width = 180

# CREATE AND SPLIT DATA SET
import tensorflow as tf
train_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=validation_split,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=validation_split,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

# STANDARDIZE DATA
import numpy as np
from tensorflow.keras import layers
normalization_layer = layers.Rescaling(1./255)

normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]

print(np.min(first_image), np.max(first_image))

# CREATE MODEL
from tensorflow.keras.models import Sequential
num_classes = len(class_names)

model = Sequential([
  layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
#  layers.Conv2D(64, 3, padding='same', activation='relu'),
#  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(64, activation='relu'),
  layers.Dense(num_classes)
])

# COMPILE MODEL
from tensorflow import keras
optimizer = keras.optimizers.Adam(learning_rate=learning_rate)
model.compile(optimizer = optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

# TRAIN/FIT MODEL
model.summary()
history = model.fit(train_ds, validation_data=val_ds, epochs=epochs)

# VALIDATE/TEST ON NEW IMAGE
test_image_path = "/content/drive/MyDrive/"
test_image_dir = pathlib.Path(test_image_path)
image_list = list(test_image_dir.glob('*.jpg'))

for image_name in image_list:
  image_name = str(image_name)
  img = tf.keras.utils.load_img(image_name, target_size=(img_height, img_width))

  img_array = tf.keras.utils.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)

  predictions = model.predict(img_array)
  score = tf.nn.softmax(predictions[0])

  print( "name:", image_name.split("/")[4].split(".")[0] )
  print( "class:", class_names[np.argmax(score)] )
  print( "confidence", 100 * np.max(score) )
  print()